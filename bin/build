#!/bin/bash
#
# $Info: Invoke cmake/make in build directory if present and generate logfile. $
function Do_Help() {
cat >/dev/null <<HELP_TEXT
Purpose
-------

Build and optionally run the specified target.

Syntax 
-------

  build [OPTIONS] TARGET

Options
-------

+ -- ............ pass remaining arguments to executable (implies -run)
+ -B _dir_ ...... specify build directory
+ -clean ........ make clean before building
+ -d ............ debug mode
+ --help ........ display this help text and exit
+ -gdb .......... invoke with gdb
+ --list ........ list executable targets and exit
+ -M _maker_ .... specify a maker from: make, gmake, ninja
+ -n ............ not really -- just parse arguments
+ -run .......... execute after compile
+ -v ............ verbose compile

HELP_TEXT
perl -ne 'if(m{^cat.*<<HELP} .. m{^HELP}){print unless m/HELP_TEXT/;}' $0
exit 0
}
if [[ "$*" == "-h" || "$*" == "--help" ]]; then
  Do_Help
fi

#-------------------------------------------------------------------------------
# Support functions
#-------------------------------------------------------------------------------
let error_count=0
function Error() { # Call this with message to report errors
  echo "ERROR: $@" 1>&2
  let error_count++
}
function firstreal () { # returns first argument that is a real file or directory
    perl -le 'for(@ARGV){next unless -e $_;print $_;exit 0;}' "$@"
}
function add_suffix () { # adds the first element to the remaining elements
    local suffix="$1";
    shift;
    for element in "$@"; do
        echo "$element$suffix";
    done
}
function findbin() {
  for x in $(perl -le 'print join(q{ },split(/:/,$ENV{PATH}))'); do
    if [[ -x "$x/$1" ]]; then echo "$x/$1"; return; fi
  done
  echo ""
}

#-------------------------------------------------------------------------------
# Check for proper environment variables
#-------------------------------------------------------------------------------
for var in SYSTEMC PROJ_ROOT CXX CC ; do
  perl -e 'exit (not exists $ENV{"$ARGV[0]"})' $var ||\
    Error "Missing definition of \$$var."
done
sc_ver_file="$SYSTEMC/include/sysc/kernel/sc_ver.h"
if [[ ! -r $sc_ver_file ]]; then
  Error "SYSTEMC does not refer to a proper installation."
fi

#-------------------------------------------------------------------------------
# Setup option defaults
#-------------------------------------------------------------------------------
HERE=$(/bin/pwd)
TARGET="" # default
MAKER=""
CMAKE_OPTS=""
MAKE_OPTS=""
RUN_OPTS=""
ARGS=""
BUILD_DIRNAME='build'
BUILD_LOGNAME='build.log'
RUN_LOGNAME='run.log'
RUN_FLAG=0
CLEAN_FLAG=0
GDBP=""
NAH=0
# If name of script is run...
if [[ $0 =~ .*run ]]; then
  RUN_FLAG=1
fi

#-------------------------------------------------------------------------------
# Determine build directory (may be overridden later)
#-------------------------------------------------------------------------------
ROOT_DIR=$(dirname $(realpath $(firstreal $(add_suffix /CMakeLists.txt . .. ../.. ../../..))))
BUILD_DIR=$(realpath $(firstreal $(add_suffix /$BUILD_DIRNAME . .. ../.. ../../..) .))
CMAKELIST="$ROOT_DIR/CMakeLists.txt"

#-------------------------------------------------------------------------------
# Scan command-line for option overrides
#-------------------------------------------------------------------------------
while [[ "$1" =~ -.* ]]; do
  if [[ "$1" == "-v" ]]; then
    MAKE_OPTS="${MAKE_OPTS} VERBOSE=1"
    RUN_OPTS="${RUN_OPTS} -v"
    VERBOSE=1
    shift
  elif [[ "$1" == '-h' || "$1" == '--help' ]]; then
    Do_Help
  elif [[ "$1" == '--list' ]]; then
    printf "Targets\n  all\n  clean\n"
    perl -lne 'print "  $1" if m{add_executable[(]\s*(\w+)}' $CMAKELIST | sort
    exit 0
  elif [[ "$1" == '-n' ]]; then
    NAH=1
    shift
  elif [[ "$1" == '-norun' ]]; then
    RUN_FLAG=0
    shift
  elif [[ "$1" == '-run' ]]; then
    RUN_FLAG=1
    shift
  elif [[ "$1" == '-clean' ]]; then
    CLEAN_FLAG=1
    shift
  elif [[ "$1" == '-gdb' ]]; then
    RUN_FLAG=1
    GDBP=gdb
    shift
  elif [[ "$1" == '-B' ]]; then
    if [[ $# -ge 2 && -d "$2" ]]; then
      BUILD_DIR="$(realpath $2)"
      shift
    else
      Error "Must supply existing directory name with $1 option."
    fi
    shift
  elif [[ "$1" == '-M' ]]; then
    if [[ $# -ge 2 ]]; then
      MAKER="$2"
      shift
    else
      Error "Must supply directory name with $1 option."
    fi
    shift
  elif [[ "$1" == '-debug' ]]; then
    CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_BUILD_TYPE=Debug"
    RUN_OPTS="${RUN_OPTS} -debug"
    shift
  elif [[ "$1" == '--' ]]; then
    RUN_FLAG=1
    shift
    ARGS="$@"
    shift
  else
    break
  fi
done
if [[ -r $CMAKELIST ]]; then
  TARGET=$(perl -lane 'if(m{add_executable[\(] *([^[:space:]]+)}){print $1; exit 0;}' $CMAKELIST)
fi
if [[ $# > 0 ]]; then
  TARGET="$1"
  shift
elif [[ "$TARGET" == "" ]]; then
  echo "INFO: Using default target - all"
else
  echo "INFO: Using default target - $TARGET"
fi
sleep 2

#-------------------------------------------------------------------------------
# Put up a big banner
#-------------------------------------------------------------------------------
if [[ $error_count == 0 ]]; then
clear;
fi
if [[ $NAH == 0 ]]; then
  ruler '*'
fi

if [[ "$TARGET" != "" ]]; then
  if [[ $error_count == 0 ]]; then
    header -uc "$TARGET"
  else
    echo "> $TARGET"
  fi
fi

#-------------------------------------------------------------------------------
# Choose build-system
#-------------------------------------------------------------------------------
if [[ "$MAKER" == '' || "$(findbin $MAKER)" == '' ]]; then
  for MAKER in ninja gmake make; do
    if [[ "$(findbin $MAKER)" != '' ]]; then
      break
    fi
  done
fi
if [[ "$(findbin $MAKER)" == '' ]]; then
  Error "Unable to find valid 'make' tool"
fi
GENERATOR='Unix Makefiles'
test "$MAKER" == 'ninja' && GENERATOR='Ninja'

if [[ error_count -gt 0 ]]; then
  echo "Please fix errors and retry."
  exit 1
fi

if [[ $NAH == 1 ]]; then
  echo "MAKER=$MAKER"
  echo "TARGET=$TARGET"
  echo "CMAKELIST=$CMAKELIST"
  echo "ROOT_DIR=$ROOT_DIR"
  echo "BUILD_DIR=$BUILD_DIR"
  exit 0
fi

#-------------------------------------------------------------------------------
# Move into build directory if present (recommended)
#-------------------------------------------------------------------------------
if [[ "$BUILD_DIR" != '.' ]]; then
  mkdir -p "$BUILD_DIR"
  echo "cd $BUILD_DIR"
  cd $BUILD_DIR 1>/dev/null
fi

#-------------------------------------------------------------------------------
# Build
#-------------------------------------------------------------------------------
rm -f $BUILD_LOGNAME $RUN_LOGNAME $ROOT_DIR/$BUILD_LOGNAME $ROOT_DIR/$RUN_LOGNAME
if [[ -r $CMAKELIST ]]; then
  echo "cmake -G "$GENERATOR" ${CMAKE_OPTS} $ROOT_DIR 2>&1 | tee -a $BUILD_LOGNAME"
  cmake -G "$GENERATOR" "${CMAKE_OPTS}" -S $ROOT_DIR
fi
if [[ $CLEAN_FLAG == 1 ]]; then
  echo "$MAKER clean 2>&1 | tee -a $ROOT_DIR/$BUILD_LOGNAME"
  $MAKER clean 2>&1 | tee -a $ROOT_DIR/$BUILD_LOGNAME
fi
if [[ "$TARGET" == "" ]]; then
  TARGET=$($MAKER help | perl -lane '/^\.\.\. .*\.x$/ && print $F[1]')
  header -uc "$TARGET"
fi
if [[ -x $TARGET ]]; then rm $TARGET; fi
echo "$MAKER $TARGET ${MAKE_OPTS} 2>&1 | tee -a $ROOT_DIR/$BUILD_LOGNAME"
$MAKER $TARGET ${MAKE_OPTS} 2>&1 | c++filt |tee -a $ROOT_DIR/$BUILD_LOGNAME
filter-mlog $ROOT_DIR/$BUILD_LOGNAME

#-------------------------------------------------------------------------------
# Run
#-------------------------------------------------------------------------------
if [[ $RUN_FLAG == 1 ]]; then
  cd $ROOT_DIR;
  env DEBUG=1\
    LD_LIBRARY_PATH=$SYSTEMC/lib \
    DYLD_LIBRARY_PATH=$SYSTEMC/lib \
  $GDBP $BUILD_DIR/$TARGET -- $RUN_OPTS $ARGS 2>&1 \
  | tee $BUILD_DIR/$RUN_LOGNAME;

  if [[ "$ROOT_DIR" != "$BUILD_DIR" ]]; then
    #filter-sclog $BUILD_DIR/$RUN_LOGNAME | c++filt >$RUN_LOGNAME;
    c++filt < $BUILD_DIR/$RUN_LOGNAME >$RUN_LOGNAME;
  else
    # filter-sclog $BUILD_DIR/$RUN_LOGNAME | c++filt >$BUILD_DIR/run2.log;
    c++filt < $BUILD_DIR/$RUN_LOGNAME >$BUILD_DIR/run2.log;
    rm $BUILD_DIR/$RUN_LOGNAME
    mv $BUILD_DIR/run2.log $RUN_LOGNAME
  fi
fi
if [[ -r $BUILD_LOGNAME ]]; then
  echo "Info: Created $BUILD_LOGNAME"
fi
if [[ -r $RUN_LOGNAME ]]; then
  echo "Info: Created $RUN_LOGNAME"
fi

#-------------------------------------------------------------------------------
# The end
#-------------------------------------------------------------------------------
